{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(workerSagaNowPlaying);\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { NOWPLAYINGENDPOINT } from 'configurations/MovieConfig';\nimport { NOWPLAYINGFETCH } from '../constants/MovieConstants';\nimport { nowPlayingSuccess, nowPlayingFail } from '../actions/MovieActions';\nimport { get } from 'libraries/api';\n\nfunction workerSagaNowPlaying(params) {\n  var response;\n  return _regeneratorRuntime.wrap(function workerSagaNowPlaying$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(get, NOWPLAYINGENDPOINT, params.data);\n\n        case 3:\n          response = _context.sent;\n          console.log(response);\n\n          if (!(response.status === 200 && response.data.results.length > 0)) {\n            _context.next = 10;\n            break;\n          }\n\n          _context.next = 8;\n          return put(nowPlayingSuccess(response.data.results));\n\n        case 8:\n          _context.next = 12;\n          break;\n\n        case 10:\n          _context.next = 12;\n          return put(nowPlayingFail(response.data.status_message));\n\n        case 12:\n          _context.next = 18;\n          break;\n\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 18;\n          return put(nowPlayingFail(_context.t0.message));\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 14]]);\n}\n\nexport var watcherNowPlaying = [takeLatest(NOWPLAYINGFETCH, workerSagaNowPlaying)];","map":{"version":3,"sources":["G:/TAPERA/nextworkspace/tapera-frontend-package-v2/redux/sagas/MovieSagas.ts"],"names":["workerSagaNowPlaying","call","put","takeLatest","NOWPLAYINGENDPOINT","NOWPLAYINGFETCH","nowPlayingSuccess","nowPlayingFail","get","params","data","response","console","log","status","results","length","status_message","message","watcherNowPlaying"],"mappings":";;oDAcUA,oB;;AAdV,SACIC,IADJ,EAEIC,GAFJ,EAGIC,UAHJ,QAIO,oBAJP;AAMA,SAASC,kBAAT,QAAmC,4BAAnC;AACA,SAASC,eAAT,QAAgC,6BAAhC;AACA,SACIC,iBADJ,EAEIC,cAFJ,QAGO,yBAHP;AAIA,SAASC,GAAT,QAAoB,eAApB;;AAEA,SAAUR,oBAAV,CAA+BS,MAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEyB,iBAAMR,IAAI,CAACO,GAAD,EAAMJ,kBAAN,EAA0BK,MAAM,CAACC,IAAjC,CAAV;;AAFzB;AAEcC,UAAAA,QAFd;AAGQC,UAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;;AAHR,gBAIYA,QAAQ,CAACG,MAAT,KAAoB,GAApB,IAA2BH,QAAQ,CAACD,IAAT,CAAcK,OAAd,CAAsBC,MAAtB,GAA+B,CAJtE;AAAA;AAAA;AAAA;;AAAA;AAKY,iBAAMd,GAAG,CAACI,iBAAiB,CAACK,QAAQ,CAACD,IAAT,CAAcK,OAAf,CAAlB,CAAT;;AALZ;AAAA;AAAA;;AAAA;AAAA;AAOY,iBAAMb,GAAG,CAACK,cAAc,CAACI,QAAQ,CAACD,IAAT,CAAcO,cAAf,CAAf,CAAT;;AAPZ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAUQ,iBAAMf,GAAG,CAACK,cAAc,CAAC,YAAMW,OAAP,CAAf,CAAT;;AAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,OAAO,IAAMC,iBAAiB,GAAG,CAC7BhB,UAAU,CAACE,eAAD,EAAkBL,oBAAlB,CADmB,CAA1B","sourcesContent":["import {\r\n    call,\r\n    put,\r\n    takeLatest,\r\n} from 'redux-saga/effects';\r\nimport { DefaultAction } from 'configurations/interfaces/redux';\r\nimport { NOWPLAYINGENDPOINT } from 'configurations/MovieConfig';\r\nimport { NOWPLAYINGFETCH } from '../constants/MovieConstants';\r\nimport {\r\n    nowPlayingSuccess,\r\n    nowPlayingFail,\r\n} from '../actions/MovieActions';\r\nimport { get } from 'libraries/api';\r\n\r\nfunction* workerSagaNowPlaying(params: DefaultAction) {\r\n    try {\r\n        const response = yield call(get, NOWPLAYINGENDPOINT, params.data);\r\n        console.log(response);\r\n        if (response.status === 200 && response.data.results.length > 0) {\r\n            yield put(nowPlayingSuccess(response.data.results));\r\n        } else {\r\n            yield put(nowPlayingFail(response.data.status_message));\r\n        }\r\n    } catch (error) {\r\n        yield put(nowPlayingFail(error.message));\r\n    }\r\n}\r\n\r\nexport const watcherNowPlaying = [\r\n    takeLatest(NOWPLAYINGFETCH, workerSagaNowPlaying),\r\n];"]},"metadata":{},"sourceType":"module"}