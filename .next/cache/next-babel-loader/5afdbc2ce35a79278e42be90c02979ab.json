{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { createWrapper } from 'next-redux-wrapper';\nimport rootReducer from 'redux/core/reducer';\nimport rootSaga from 'redux/core/saga';\n\nconst bindMiddleware = middleware => {\n  if (true) {\n    const {\n      composeWithDevTools\n    } = require('redux-devtools-extension');\n\n    return composeWithDevTools(applyMiddleware(...middleware));\n  }\n\n  return applyMiddleware(...middleware);\n};\n\nexport const makeStore = context => {\n  const sagaMiddleware = createSagaMiddleware();\n  const store = createStore(rootReducer, bindMiddleware([sagaMiddleware]));\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\nexport const wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["D:/Learning/React/tapera-frontend-package/redux/core/store.ts"],"names":["createStore","applyMiddleware","createSagaMiddleware","createWrapper","rootReducer","rootSaga","bindMiddleware","middleware","composeWithDevTools","require","makeStore","context","sagaMiddleware","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AAGA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,aAAT,QAA8B,oBAA9B;AAEA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,OAAOC,QAAP,MAAqB,iBAArB;;AAEA,MAAMC,cAAc,GAAIC,UAAD,IAAgB;AACrC,YAA2C;AACzC,UAAM;AAAEC,MAAAA;AAAF,QAA0BC,OAAO,CAAC,0BAAD,CAAvC;;AACA,WAAOD,mBAAmB,CAACP,eAAe,CAAC,GAAGM,UAAJ,CAAhB,CAA1B;AACD;;AACD,SAAON,eAAe,CAAC,GAAGM,UAAJ,CAAtB;AACD,CAND;;AAQA,OAAO,MAAMG,SAAS,GAAIC,OAAD,IAAa;AACpC,QAAMC,cAAc,GAAGV,oBAAoB,EAA3C;AACA,QAAMW,KAAU,GAAGb,WAAW,CAACI,WAAD,EAAcE,cAAc,CAAC,CAACM,cAAD,CAAD,CAA5B,CAA9B;AAEAC,EAAAA,KAAK,CAACC,QAAN,GAAiBF,cAAc,CAACG,GAAf,CAAmBV,QAAnB,CAAjB;AAEA,SAAOQ,KAAP;AACD,CAPM;AASP,OAAO,MAAMG,OAAO,GAAGb,aAAa,CAACO,SAAD,EAAY;AAAEO,EAAAA,KAAK,EAAE;AAAT,CAAZ,CAA7B","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { persistReducer } from 'redux-persist';\nimport createSagaMiddleware from 'redux-saga'\nimport { createWrapper } from 'next-redux-wrapper'\n\nimport rootReducer from 'redux/core/reducer'\nimport rootSaga from 'redux/core/saga'\n\nconst bindMiddleware = (middleware) => {\n  if (process.env.NODE_ENV !== 'production') {\n    const { composeWithDevTools } = require('redux-devtools-extension')\n    return composeWithDevTools(applyMiddleware(...middleware))\n  }\n  return applyMiddleware(...middleware)\n}\n\nexport const makeStore = (context) => {\n  const sagaMiddleware = createSagaMiddleware()\n  const store: any = createStore(rootReducer, bindMiddleware([sagaMiddleware]))\n\n  store.sagaTask = sagaMiddleware.run(rootSaga)\n\n  return store\n}\n\nexport const wrapper = createWrapper(makeStore, { debug: true })\n"]},"metadata":{},"sourceType":"module"}