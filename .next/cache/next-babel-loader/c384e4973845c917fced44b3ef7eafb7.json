{"ast":null,"code":"import { combineReducers } from 'redux';\nimport LoadReducers from 'redux/reducers';\nimport hookReducer from 'redux/core/hook';\nvar reduxReducer = combineReducers(LoadReducers);\n\nif (Object.keys(LoadReducers).length === 0 && LoadReducers.constructor === Object) {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  var initialReducer = function initialReducer() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var action = arguments.length > 1 ? arguments[1] : undefined;\n    return state;\n  };\n\n  reduxReducer = combineReducers({\n    initialReducer: initialReducer\n  });\n}\n\nvar hooks = function hooks(state, action) {\n  var hook = hookReducer(state, action);\n  return reduxReducer(hook.state, hook.action);\n};\n\nexport default hooks;","map":{"version":3,"sources":["G:/TAPERA/nextworkspace/tapera-frontend-package-v2/redux/core/reducer.ts"],"names":["combineReducers","LoadReducers","hookReducer","reduxReducer","Object","keys","length","constructor","initialReducer","state","action","hooks","hook"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AAEA,IAAIC,YAAiB,GAAGH,eAAe,CAACC,YAAD,CAAvC;;AAEA,IAAIG,MAAM,CAACC,IAAP,CAAYJ,YAAZ,EAA0BK,MAA1B,KAAqC,CAArC,IAA0CL,YAAY,CAACM,WAAb,KAA6BH,MAA3E,EAAmF;AACjF;AACA,MAAMI,cAAmB,GAAG,SAAtBA,cAAsB;AAAA,QAACC,KAAD,uEAAc,EAAd;AAAA,QAAkBC,MAAlB;AAAA,WAAkCD,KAAlC;AAAA,GAA5B;;AACAN,EAAAA,YAAY,GAAGH,eAAe,CAAC;AAAEQ,IAAAA,cAAc,EAAdA;AAAF,GAAD,CAA9B;AACD;;AAED,IAAMG,KAAU,GAAG,SAAbA,KAAa,CAACF,KAAD,EAAaC,MAAb,EAA6B;AAC9C,MAAME,IAAI,GAAGV,WAAW,CAACO,KAAD,EAAQC,MAAR,CAAxB;AACA,SAAOP,YAAY,CAACS,IAAI,CAACH,KAAN,EAAaG,IAAI,CAACF,MAAlB,CAAnB;AACD,CAHD;;AAKA,eAAeC,KAAf","sourcesContent":["import { combineReducers } from 'redux';\nimport LoadReducers from 'redux/reducers';\nimport hookReducer from 'redux/core/hook';\n \nlet reduxReducer: any = combineReducers(LoadReducers);\n \nif (Object.keys(LoadReducers).length === 0 && LoadReducers.constructor === Object) {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const initialReducer: any = (state: any = [], action: any) => state;\n  reduxReducer = combineReducers({ initialReducer } as any);\n}\n \nconst hooks: any = (state: any, action: any) => {\n  const hook = hookReducer(state, action);\n  return reduxReducer(hook.state, hook.action);\n};\n \nexport default hooks;"]},"metadata":{},"sourceType":"module"}