{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { persistReducer } from 'redux-persist';\nimport createSagaMiddleware from 'redux-saga';\nimport { createWrapper } from 'next-redux-wrapper';\nimport reducer from 'redux/core/reducer';\nimport persist from 'redux/core/persist'; // import { defaultState } from 'configurations/redux';\n\nvar persistedReducer = persistReducer(persist.storeConfig, reducer);\nexport function initializeStore(initialState) {\n  var store = createStore(persistedReducer, initialState, composeWithDevTools(applyMiddleware()));\n  return store;\n}\nimport rootReducer from 'redux/core/reducer';\nimport rootSaga from 'redux/core/saga';\n\nvar bindMiddleware = function bindMiddleware(middleware) {\n  if (true) {\n    var _require = require('redux-devtools-extension'),\n        _composeWithDevTools = _require.composeWithDevTools;\n\n    return _composeWithDevTools(applyMiddleware.apply(void 0, _toConsumableArray(middleware)));\n  }\n\n  return applyMiddleware.apply(void 0, _toConsumableArray(middleware));\n};\n\nexport var makeStore = function makeStore(context) {\n  var sagaMiddleware = createSagaMiddleware();\n  var store = createStore(rootReducer, bindMiddleware([sagaMiddleware]));\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\nexport var wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["D:/Learning/React/tapera-frontend-package/redux/core/store.ts"],"names":["createStore","applyMiddleware","composeWithDevTools","persistReducer","createSagaMiddleware","createWrapper","reducer","persist","persistedReducer","storeConfig","initializeStore","initialState","store","rootReducer","rootSaga","bindMiddleware","middleware","require","makeStore","context","sagaMiddleware","sagaTask","run","wrapper","debug"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,aAAT,QAA8B,oBAA9B;AAEA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,OAAP,MAAoB,oBAApB,C,CACA;;AAGA,IAAMC,gBAAgB,GAAGL,cAAc,CAACI,OAAO,CAACE,WAAT,EAAsBH,OAAtB,CAAvC;AAEA,OAAO,SAASI,eAAT,CAAyBC,YAAzB,EAA4C;AACjD,MAAMC,KAAK,GAAGZ,WAAW,CACvBQ,gBADuB,EAEvBG,YAFuB,EAGvBT,mBAAmB,CAACD,eAAe,EAAhB,CAHI,CAAzB;AAMA,SAAOW,KAAP;AACD;AAED,OAAOC,WAAP,MAAwB,oBAAxB;AACA,OAAOC,QAAP,MAAqB,iBAArB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,UAAD,EAAgB;AACrC,YAA2C;AAAA,mBACTC,OAAO,CAAC,0BAAD,CADE;AAAA,QACjCf,oBADiC,YACjCA,mBADiC;;AAEzC,WAAOA,oBAAmB,CAACD,eAAe,MAAf,4BAAmBe,UAAnB,EAAD,CAA1B;AACD;;AACD,SAAOf,eAAe,MAAf,4BAAmBe,UAAnB,EAAP;AACD,CAND;;AAQA,OAAO,IAAME,SAAS,GAAG,SAAZA,SAAY,CAACC,OAAD,EAAa;AACpC,MAAMC,cAAc,GAAGhB,oBAAoB,EAA3C;AACA,MAAMQ,KAAU,GAAGZ,WAAW,CAACa,WAAD,EAAcE,cAAc,CAAC,CAACK,cAAD,CAAD,CAA5B,CAA9B;AAEAR,EAAAA,KAAK,CAACS,QAAN,GAAiBD,cAAc,CAACE,GAAf,CAAmBR,QAAnB,CAAjB;AAEA,SAAOF,KAAP;AACD,CAPM;AASP,OAAO,IAAMW,OAAO,GAAGlB,aAAa,CAACa,SAAD,EAAY;AAAEM,EAAAA,KAAK,EAAE;AAAT,CAAZ,CAA7B","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { persistReducer } from 'redux-persist';\nimport createSagaMiddleware from 'redux-saga'\nimport { createWrapper } from 'next-redux-wrapper'\n\nimport reducer from 'redux/core/reducer';\nimport persist from 'redux/core/persist';\n// import { defaultState } from 'configurations/redux';\nimport { DefaultState } from 'configurations/interfaces/redux';\n\nconst persistedReducer = persistReducer(persist.storeConfig, reducer);\n\nexport function initializeStore(initialState: any) {\n  const store = createStore(\n    persistedReducer,\n    initialState,\n    composeWithDevTools(applyMiddleware())\n  );\n\n  return store;\n}\n\nimport rootReducer from 'redux/core/reducer'\nimport rootSaga from 'redux/core/saga'\n\nconst bindMiddleware = (middleware) => {\n  if (process.env.NODE_ENV !== 'production') {\n    const { composeWithDevTools } = require('redux-devtools-extension')\n    return composeWithDevTools(applyMiddleware(...middleware))\n  }\n  return applyMiddleware(...middleware)\n}\n\nexport const makeStore = (context) => {\n  const sagaMiddleware = createSagaMiddleware()\n  const store: any = createStore(rootReducer, bindMiddleware([sagaMiddleware]))\n\n  store.sagaTask = sagaMiddleware.run(rootSaga)\n\n  return store\n}\n\nexport const wrapper = createWrapper(makeStore, { debug: true })\n"]},"metadata":{},"sourceType":"module"}