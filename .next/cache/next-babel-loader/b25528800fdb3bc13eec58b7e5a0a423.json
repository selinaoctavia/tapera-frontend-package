{"ast":null,"code":"var _jsxFileName = \"G:\\\\TAPERA\\\\nextworkspace\\\\tapera-frontend-package-v2\\\\pages\\\\movie.tsx\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Moment from 'moment';\nimport { nowPlayingFetch } from 'redux/actions/MovieActions';\n\nclass Movie extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    const start = Moment().startOf('month');\n    const end = Moment(start).add(2, 'month');\n    const data = {\n      'primary_release_date.gte': start.format('YYYY-MM-DD'),\n      'primary_release_date.lte': end.format('YYYY-MM-DD')\n    };\n    this.props.onRequest(data);\n  }\n\n  render() {\n    const {\n      response,\n      error\n    } = this.props;\n    console.log(response);\n    return response.map((movie, key) => {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }\n      }, movie.title);\n    });\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  fetch: state.nowPlaying.fetch,\n  response: state.nowPlaying.response,\n  error: state.nowPlaying.error,\n  action: state.nowPlaying.action\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onRequest: value => dispatch(nowPlayingFetch(value))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Movie);","map":{"version":3,"sources":["G:/TAPERA/nextworkspace/tapera-frontend-package-v2/pages/movie.tsx"],"names":["React","Component","connect","Moment","nowPlayingFetch","Movie","constructor","props","componentDidMount","start","startOf","end","add","data","format","onRequest","render","response","error","console","log","map","movie","key","title","mapStateToProps","state","fetch","nowPlaying","action","mapDispatchToProps","dispatch","value"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,eAAT,QAAgC,4BAAhC;;AAGA,MAAMC,KAAN,SAAoBJ,SAApB,CAAwC;AACpCK,EAAAA,WAAW,CAACC,KAAD,EAAa;AACtB,UAAMA,KAAN;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,UAAMC,KAAK,GAAGN,MAAM,GAAGO,OAAT,CAAiB,OAAjB,CAAd;AACA,UAAMC,GAAG,GAAKR,MAAM,CAACM,KAAD,CAAN,CAAcG,GAAd,CAAkB,CAAlB,EAAqB,OAArB,CAAd;AACA,UAAMC,IAAI,GAAG;AACX,kCAA4BJ,KAAK,CAACK,MAAN,CAAa,YAAb,CADjB;AAEX,kCAA4BH,GAAG,CAACG,MAAJ,CAAW,YAAX;AAFjB,KAAb;AAIA,SAAKP,KAAL,CAAWQ,SAAX,CAAqBF,IAArB;AACD;;AAEDG,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAAsB,KAAKX,KAAjC;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACA,WAEEA,QAAQ,CAACI,GAAT,CAAa,CAACC,KAAD,EAAaC,GAAb,KAA6B;AACtC,aACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAMD,KAAK,CAACE,KAAZ,CADA;AAGH,KAJD,CAFF;AAQD;;AA1BmC;;AA6BtC,MAAMC,eAAe,GAAIC,KAAD,KAAiB;AACvCC,EAAAA,KAAK,EAAED,KAAK,CAACE,UAAN,CAAiBD,KADe;AAEvCV,EAAAA,QAAQ,EAAES,KAAK,CAACE,UAAN,CAAiBX,QAFY;AAGvCC,EAAAA,KAAK,EAAEQ,KAAK,CAACE,UAAN,CAAiBV,KAHe;AAIvCW,EAAAA,MAAM,EAAEH,KAAK,CAACE,UAAN,CAAiBC;AAJc,CAAjB,CAAxB;;AAOA,MAAMC,kBAAkB,GAAIC,QAAD,KAAoB;AAC7ChB,EAAAA,SAAS,EAAGiB,KAAD,IAAmBD,QAAQ,CAAC3B,eAAe,CAAC4B,KAAD,CAAhB;AADO,CAApB,CAA3B;;AAIF,eAAe9B,OAAO,CAACuB,eAAD,EAAkBK,kBAAlB,CAAP,CAA6CzB,KAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Moment from 'moment';\r\nimport { nowPlayingFetch } from 'redux/actions/MovieActions';\r\nimport { NOWPLAYINGSUCCESS, NOWPLAYINGFAIL } from 'redux/constants/MovieConstants';\r\n\r\nclass Movie extends Component<any, any> {\r\n    constructor(props: any) {\r\n      super(props);\r\n    }\r\n  \r\n    componentDidMount() {\r\n      const start = Moment().startOf('month');\r\n      const end   = Moment(start).add(2, 'month');\r\n      const data = {\r\n        'primary_release_date.gte': start.format('YYYY-MM-DD'),\r\n        'primary_release_date.lte': end.format('YYYY-MM-DD'),\r\n      };\r\n      this.props.onRequest(data);\r\n    }\r\n  \r\n    render() {\r\n      const { response, error } = this.props;\r\n      console.log(response);\r\n      return (\r\n         \r\n        response.map((movie: any, key: number) => {\r\n            return (\r\n            <div>{movie.title}</div>\r\n            )\r\n        })\r\n        );\r\n    }\r\n  }\r\n  \r\n  const mapStateToProps = (state: any) => ({\r\n    fetch: state.nowPlaying.fetch,\r\n    response: state.nowPlaying.response,\r\n    error: state.nowPlaying.error,\r\n    action: state.nowPlaying.action,\r\n  });\r\n  \r\n  const mapDispatchToProps = (dispatch: any) => ({\r\n    onRequest: (value: object) => dispatch(nowPlayingFetch(value)),\r\n  });\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(Movie);\r\n  "]},"metadata":{},"sourceType":"module"}