{"ast":null,"code":"var _jsxFileName = \"G:\\\\TAPERA\\\\nextworkspace\\\\tapera-frontend-package-v2\\\\pages\\\\movie.tsx\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Moment from 'moment';\nimport { nowPlayingFetch } from 'redux/actions/MovieActions';\nimport { NOWPLAYINGSUCCESS, NOWPLAYINGFAIL } from 'redux/constants/MovieConstants';\n\nclass Movie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      action: this.props.action,\n      err: this.props.err,\n      res: this.props.res,\n      small: false\n    };\n    this.toggleSmall = this.toggleSmall.bind(this);\n  }\n\n  toggleSmall() {\n    this.setState({\n      small: !this.state.small\n    });\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.action !== prevState.action) {\n      let nextErr = prevState.err;\n      if (nextProps.action === NOWPLAYINGFAIL) nextErr = nextProps.err;\n      let nextRes = prevState.res;\n      if (nextProps.action === NOWPLAYINGSUCCESS) nextRes = nextProps.res;\n      return {\n        action: nextProps.action,\n        err: nextErr,\n        res: nextRes\n      };\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.action !== this.state.action) {\n      if (this.state.action === NOWPLAYINGFAIL) {\n        this.toggleSmall();\n      }\n    }\n  }\n\n  componentDidMount() {\n    const start = Moment().startOf('month');\n    const end = Moment(start).add(2, 'month');\n    const data = {\n      'primary_release_date.gte': start.format('YYYY-MM-DD'),\n      'primary_release_date.lte': end.format('YYYY-MM-DD')\n    };\n    this.props.onRequest(data);\n  }\n\n  render() {\n    const {\n      res,\n      err\n    } = this.state;\n    return res.map((movie, key) => {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }\n      }, movie.title);\n    });\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  fetch: state.nowPlaying.fetch,\n  response: state.nowPlaying.response,\n  error: state.nowPlaying.error,\n  action: state.nowPlaying.action\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onRequest: value => dispatch(nowPlayingFetch(value))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Movie);","map":{"version":3,"sources":["G:/TAPERA/nextworkspace/tapera-frontend-package-v2/pages/movie.tsx"],"names":["React","Component","connect","Moment","nowPlayingFetch","NOWPLAYINGSUCCESS","NOWPLAYINGFAIL","Movie","constructor","props","state","action","err","res","small","toggleSmall","bind","setState","getDerivedStateFromProps","nextProps","prevState","nextErr","nextRes","componentDidUpdate","prevProps","componentDidMount","start","startOf","end","add","data","format","onRequest","render","map","movie","key","title","mapStateToProps","fetch","nowPlaying","response","error","mapDispatchToProps","dispatch","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Moment from 'moment';\r\nimport { nowPlayingFetch } from 'redux/actions/MovieActions';\r\nimport { NOWPLAYINGSUCCESS, NOWPLAYINGFAIL } from 'redux/constants/MovieConstants';\r\n\r\nclass Movie extends Component<any, any> {\r\n    constructor(props: any) {\r\n      super(props);\r\n      this.state = {\r\n        action: this.props.action,\r\n        err: this.props.err,\r\n        res: this.props.res,\r\n        small: false,\r\n      };\r\n  \r\n      this.toggleSmall = this.toggleSmall.bind(this);\r\n    }\r\n  \r\n    toggleSmall() {\r\n      this.setState({\r\n        small: !this.state.small,\r\n      });\r\n    }\r\n  \r\n    static getDerivedStateFromProps(nextProps: any, prevState: any) {\r\n      if (nextProps.action !== prevState.action) {\r\n        let nextErr = prevState.err;\r\n        if (nextProps.action === NOWPLAYINGFAIL) nextErr = nextProps.err;\r\n  \r\n        let nextRes = prevState.res;\r\n        if (nextProps.action === NOWPLAYINGSUCCESS) nextRes = nextProps.res;\r\n  \r\n        return {\r\n          action: nextProps.action,\r\n          err: nextErr,\r\n          res: nextRes,\r\n        };\r\n      }\r\n  \r\n      return null;\r\n    }\r\n  \r\n    componentDidUpdate(prevProps: any, prevState: any) {\r\n      if (prevState.action !== this.state.action) {\r\n        if (this.state.action === NOWPLAYINGFAIL) {\r\n          this.toggleSmall();\r\n        }\r\n      }\r\n    }\r\n  \r\n    componentDidMount() {\r\n      const start = Moment().startOf('month');\r\n      const end   = Moment(start).add(2, 'month');\r\n      const data = {\r\n        'primary_release_date.gte': start.format('YYYY-MM-DD'),\r\n        'primary_release_date.lte': end.format('YYYY-MM-DD'),\r\n      };\r\n      this.props.onRequest(data);\r\n    }\r\n  \r\n    render() {\r\n      const { res, err } = this.state;\r\n      \r\n      return (\r\n        res.map((movie: any, key: number) => {\r\n            return (\r\n            <div>{movie.title}</div>\r\n            )\r\n        })\r\n        );\r\n    }\r\n  }\r\n  \r\n  const mapStateToProps = (state: any) => ({\r\n    fetch: state.nowPlaying.fetch,\r\n    response: state.nowPlaying.response,\r\n    error: state.nowPlaying.error,\r\n    action: state.nowPlaying.action,\r\n  });\r\n  \r\n  const mapDispatchToProps = (dispatch: any) => ({\r\n    onRequest: (value: object) => dispatch(nowPlayingFetch(value)),\r\n  });\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(Movie);\r\n  "]},"metadata":{},"sourceType":"module"}