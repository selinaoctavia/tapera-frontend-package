{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { defaultState, defaultAction } from 'configurations/redux';\nimport { NOWPLAYINGFETCH, NOWPLAYINGSUCCESS, NOWPLAYINGFAIL } from '../constants/MovieConstants';\n\nconst ReducerNowPlayingDashboard = (state = defaultState, action = defaultAction) => {\n  switch (action.type) {\n    case NOWPLAYINGFETCH:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        fetch: true,\n        data: action.data,\n        action: action.type\n      });\n\n    case NOWPLAYINGSUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        fetch: false,\n        response: action.data,\n        action: action.type\n      });\n\n    case NOWPLAYINGFAIL:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        fetch: false,\n        error: action.data,\n        action: action.type\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default ReducerNowPlayingDashboard;","map":{"version":3,"sources":["G:/TAPERA/nextworkspace/tapera-frontend-package-v2/redux/reducers/MovieReducers.ts"],"names":["defaultState","defaultAction","NOWPLAYINGFETCH","NOWPLAYINGSUCCESS","NOWPLAYINGFAIL","ReducerNowPlayingDashboard","state","action","type","fetch","data","response","error"],"mappings":";;;;;;AACA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,sBAA5C;AACA,SAASC,eAAT,EAA0BC,iBAA1B,EAA6CC,cAA7C,QAAmE,6BAAnE;;AAEA,MAAMC,0BAA0B,GAAG,CAACC,KAAmB,GAAGN,YAAvB,EAAqCO,MAAqB,GAAGN,aAA7D,KAA+E;AAC9G,UAAQM,MAAM,CAACC,IAAf;AACE,SAAKN,eAAL;AACE,6CACKI,KADL;AAEEG,QAAAA,KAAK,EAAE,IAFT;AAGEC,QAAAA,IAAI,EAAEH,MAAM,CAACG,IAHf;AAIEH,QAAAA,MAAM,EAAEA,MAAM,CAACC;AAJjB;;AAOF,SAAKL,iBAAL;AACE,6CACKG,KADL;AAEEG,QAAAA,KAAK,EAAE,KAFT;AAGEE,QAAAA,QAAQ,EAAEJ,MAAM,CAACG,IAHnB;AAIEH,QAAAA,MAAM,EAAEA,MAAM,CAACC;AAJjB;;AAOF,SAAKJ,cAAL;AACE,6CACKE,KADL;AAEEG,QAAAA,KAAK,EAAE,KAFT;AAGEG,QAAAA,KAAK,EAAEL,MAAM,CAACG,IAHhB;AAIEH,QAAAA,MAAM,EAAEA,MAAM,CAACC;AAJjB;;AAOF;AACE,aAAOF,KAAP;AA1BJ;AA4BD,CA7BH;;AA+BA,eAAeD,0BAAf","sourcesContent":["import { DefaultState, DefaultAction } from 'configurations/interfaces/redux';\r\nimport { defaultState, defaultAction } from 'configurations/redux';\r\nimport { NOWPLAYINGFETCH, NOWPLAYINGSUCCESS, NOWPLAYINGFAIL } from '../constants/MovieConstants';\r\n\r\nconst ReducerNowPlayingDashboard = (state: DefaultState = defaultState, action: DefaultAction = defaultAction) => {\r\n    switch (action.type) {\r\n      case NOWPLAYINGFETCH:\r\n        return {\r\n          ...state,\r\n          fetch: true,\r\n          data: action.data,\r\n          action: action.type,\r\n        };\r\n  \r\n      case NOWPLAYINGSUCCESS:\r\n        return {\r\n          ...state,\r\n          fetch: false,\r\n          response: action.data,\r\n          action: action.type,\r\n        };\r\n  \r\n      case NOWPLAYINGFAIL:\r\n        return {\r\n          ...state,\r\n          fetch: false,\r\n          error: action.data,\r\n          action: action.type,\r\n        };\r\n  \r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n\r\nexport default ReducerNowPlayingDashboard;\r\n"]},"metadata":{},"sourceType":"module"}