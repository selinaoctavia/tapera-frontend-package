{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { TESTREDUX } from 'redux/constants/TestConstants';\nimport { defaultState, defaultAction } from 'configurations/redux';\n\nconst TestReducers = (state = defaultState, action = defaultAction) => {\n  switch (action.type) {\n    case TESTREDUX:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        response: action.data,\n        action: action.type\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default TestReducers;","map":{"version":3,"sources":["D:/Learning/React/tapera-frontend-package/redux/reducers/TestReducers.ts"],"names":["TESTREDUX","defaultState","defaultAction","TestReducers","state","action","type","response","data"],"mappings":";;;;;;AAEA,SACEA,SADF,QAEO,+BAFP;AAIA,SACEC,YADF,EAEEC,aAFF,QAGO,sBAHP;;AAKA,MAAMC,YAAY,GAAG,CAACC,KAAmB,GAAGH,YAAvB,EAAqCI,MAAqB,GAAGH,aAA7D,KAA+E;AAClG,UAAQG,MAAM,CAACC,IAAf;AACE,SAAKN,SAAL;AACE,6CACKI,KADL;AAEEG,QAAAA,QAAQ,EAAEF,MAAM,CAACG,IAFnB;AAGEH,QAAAA,MAAM,EAAEA,MAAM,CAACC;AAHjB;;AAMF;AACE,aAAOF,KAAP;AATJ;AAWD,CAZD;;AAcA,eAAeD,YAAf","sourcesContent":["import { DefaultState, DefaultAction } from 'configurations/interfaces/redux';\n\nimport {\n  TESTREDUX\n} from 'redux/constants/TestConstants';\n\nimport {\n  defaultState,\n  defaultAction\n} from 'configurations/redux';\n\nconst TestReducers = (state: DefaultState = defaultState, action: DefaultAction = defaultAction) => {\n  switch (action.type) {\n    case TESTREDUX:\n      return {\n        ...state,\n        response: action.data,\n        action: action.type,\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default TestReducers;\n"]},"metadata":{},"sourceType":"module"}